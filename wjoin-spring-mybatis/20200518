新一代基金理财系统
使用技术	springboot，mybatis，dubbo，redis，kafka，maven，git，mysql
项目功能	该系统是一个分布式系统，分为前置模块、TA产品层、份额中心、客户中心、账户中心等中心组成，每天销售商上送文件数据，经前置转换后，
        调用rpc接口存入数据，各中心收到数据后，经分布式批量框架将各业务调起，业务处理完成后，将数据在导出到各个文件系统，上送给其他系统

责任描述	TA产品层理财业务的开发，份额中心申购、赎回、收益分配业务的处理；分布式批量根据场次号缓存的处理；组件化的开发和讲解。
        在处理收益分配业务时，由于数据量极大，使用了mybatis的流式查询和多线程结合的处理方式，避免了内存溢出；
        使用了guava的缓存，缓存了产品和销售商的数据，避免多次调用rpc接口，造成服务中断

心得体会	该系统的开发，学会使用了mybatis的流式处理；学会使用guava的缓存，在使用缓存过程中，同一批数据会缓存多个，这里使用了工厂模式；
        在各中心调用rpc接口过程中，由于缓存是根据场次号来的，一次rpc调用会将rpc.context清空，故采用了ThreadLocal来存放场次号


工银e缴费系统
使用技术 springboot，mybatis，dubbo，redis，kafka，maven，git，oracle
项目功能 该系统主要分为web前端、手机端、后端三大部分，用户在前端录入需要缴费项目端基本信息，经业务人员操作复核后会将该数据传入到后端系统保存，
        并将该数据推送给手机端，手机端用户查询到该项目到数据，可以使用该项目数据进行缴费操作。
责任描述 前端页面数据的新增和展示，后端接口的开发；项目数据缓存的开发和设计，采用了缓存数据先取自本地缓存，如果本地缓存没有则redis中取，如果
        取不到则查询数据库；消息推送kafka的使用和分享
心得体会 通过对该系统对维护，对消息推送kafka的使用更加深入，知道其在使用中不仅可以根据topic来消费数据，还可以根据topic+partition去消费数据；
        在使用redis中，发现一些在数据库中不存在对数据也会一直会访问，采用了将该部分数据也存入到redis中并设置一个失效时间，缓解了数据库到压力（缓存穿透）


SpringBoot
1.@SpringBootApplication
    @SpringBootConfiguration   声明当前类是一个配置类
    @EnableAutoConfiguration  开启自动配置，告诉SpringBoot基于所添加的依赖，去“猜测”你想要如何配置Spring  不需要自动装配可以使用exclude
    @ComponentScan  如果没有指定这些属性，那么将从声明这个注解的类所在的包开始，扫描包及子包

2.springBoot“开机启动”某些方法的方式
    实现 ApplicationRunner 和 CommandLineRunner 接口来实现
    CommandLineRunner接口可以用来接收字符串数组的命令行参数，ApplicationRunner 是使用ApplicationArguments 用来接收参数的。
         这两种方式的实现都很简单，直接实现了相应的接口就可以了。记得在类上加@Component注解。
         如果想要指定启动方法执行的顺序，可以通过实现org.springframework.core.Ordered接口或者使用org.springframework.core.annotation.Order注解来实现

    启动main方法的传入参数：
    https://www.hangge.com/blog/cache/detail_2508.html

3.springboot定时任务
    @EnableScheduling 开启定时任务
    @Scheduled(cron = "0/1 * * * * ?") 定时任务时间间隔

    一般都是单线程执行，可以配置多线程
    @Configuration
    public class TaskConfig {

        @Bean(name = "TaskPool")
        public TaskScheduler taskScheduler(){
            ThreadPoolTaskScheduler taskScheduler = new ThreadPoolTaskScheduler();
            taskScheduler.setPoolSize(3);
            return taskScheduler;
        }
    }